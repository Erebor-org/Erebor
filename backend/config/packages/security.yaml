security:
  password_hashers:
    App\Entity\User: "auto"
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"

  role_hierarchy:
    ROLE_ADMIN: ROLE_USER

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: username
    # used to reload user from session & other features (e.g. switch_user)
  firewalls:
    login:
      pattern: ^/login
      stateless: true
      security: false
    register:
      pattern: ^/register
      stateless: true
      security: false
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      stateless: true
      provider: app_user_provider
      logout:
        path: /logout
        invalidate_session: true
      jwt: ~

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # Public routes (registration and login)
    - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }

    # Routes accessible by all authenticated users (ROLE_USER and ROLE_ADMIN)
    - { path: ^/statistics, roles: ROLE_USER }
    - { path: ^/api/characters, roles: ROLE_USER }
    - { path: ^/ranks, roles: ROLE_USER }
    - { path: ^/user, roles: ROLE_USER }
    - { path: ^/hello, roles: ROLE_USER }

    # Character read routes (accessible to all authenticated users)
    - { path: ^/characters/, roles: ROLE_USER }

    # Admin-only routes (requires ROLE_ADMIN) - Write operations
    - { path: ^/characters$, roles: ROLE_ADMIN }
    - { path: ^/mules, roles: ROLE_ADMIN }
    - { path: ^/blacklist, roles: ROLE_ADMIN }
    - { path: ^/warnings, roles: ROLE_ADMIN }
    - { path: ^/admin/users, roles: ROLE_ADMIN }

    # Default: require authentication for all other routes
    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
